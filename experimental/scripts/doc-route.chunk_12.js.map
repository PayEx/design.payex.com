{"version":3,"sources":["webpack://payex/./src/App/components/InputGroup/index.js","webpack://payex/./src/App/Documentation/components/InputGroup/index.js"],"names":["__webpack_require__","d","__webpack_exports__","Addon","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","_ref","type","value","color","disabled","a","createElement","className","concat","Feedback","_ref2","icon","InputGroup","_ref3","id","placeholder","pattern","validate","required","defaultValue","autoComplete","readOnly","label","validationState","selectOptions","prefixValue","prefixType","prefixBtnColor","postfixValue","postfixType","postfixBtnColor","feedbackIcon","helpBlock","errorMessage","successMessage","attrs","data-validate","inputGrpClasses","classnames","htmlFor","map","opt","i","key","length","data-success","data-error","propTypes","PropTypes","string","isRequired","bool","oneOf","array","oneOfType","errorMessag","successMessag","r","BasicExample","CheckboxesAndRadios","ButtonAddons","WithSelect","WithFeedbackIcon","ValidationStates","Disabled","_utils__WEBPACK_IMPORTED_MODULE_1__","react_prism__WEBPACK_IMPORTED_MODULE_2__","react_prism__WEBPACK_IMPORTED_MODULE_2___default","_components_InputGroup__WEBPACK_IMPORTED_MODULE_3__","Fragment","language","showCasePanel","codeFigure","removeOuterTag","name","docToc"],"mappings":"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","file":"scripts/doc-route.chunk_12.js?b7589d7a861cc6440393","sourcesContent":["import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport const Addon = ({ type, value, color, disabled }) => (\n    (type === \"button\") ?\n        <button type=\"button\" className={`btn btn-${color}`} disabled={disabled}>\n            {value}\n        </button>\n        : <span className=\"input-group-addon\">{(type === \"icon\") ? <i className=\"material-icons\">{value}</i> : value}</span>\n);\n\nconst Feedback = ({ icon }) => (\n    <span className=\"form-control-feedback\">{\"\\n\\t\\t\"}\n        <i className=\"material-icons\">{icon}</i>{\"\\n\\t\"}\n    </span>\n);\n\nconst InputGroup = ({\n    id,\n    type,\n    placeholder,\n    pattern,\n    validate,\n    required,\n    defaultValue,\n    autoComplete,\n    disabled,\n    readOnly,\n    label,\n    validationState,\n    selectOptions,\n    prefixValue,\n    prefixType,\n    prefixBtnColor,\n    postfixValue,\n    postfixType,\n    postfixBtnColor,\n    feedbackIcon,\n    helpBlock,\n    errorMessage,\n    successMessage\n}) => {\n    const attrs = {\n        type: type || null,\n        className: \"form-control\",\n        id: id || null,\n        placeholder: placeholder || null,\n        defaultValue: defaultValue || \"\",\n        disabled: disabled || null,\n        readOnly: readOnly || null,\n        autoComplete: autoComplete || null,\n        required: required || null,\n        pattern: pattern ? \"\" : null,\n        \"data-validate\": validate ? \"\" : null\n    };\n\n    const inputGrpClasses = classnames(\n        \"input-group\",\n        validationState ? `has-${validationState}` : null,\n        feedbackIcon ? \"has-feedback\" : null\n    );\n\n    return (\n        <div className=\"form-group\">{\"\\n\"}\n            {label ? <label htmlFor={id}>{label}</label> : null}{label ? \"\\n\" : null}\n            <div className={inputGrpClasses}>{\"\\n\"}\n                {prefixValue ? <Addon type={prefixType} value={prefixValue} color={prefixBtnColor} disabled={disabled} /> : null }{prefixValue ? \"\\n\" : null}\n                {type === \"textarea\" ?\n                    <textarea {...attrs} ></textarea>\n                    : type === \"select\" ?\n                        <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                            {selectOptions.map((opt, i) => (\n                                <Fragment key={opt + i}>\n                                    <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                </Fragment>\n                            ))}{\"\\n\\t\"}\n                        </select>\n                        :\n                        <input {...attrs} />}\n                {\"\\n\"}\n                {feedbackIcon ? <Feedback icon={feedbackIcon} /> : null} {feedbackIcon ? \"\\n\" : null}\n                {postfixValue ? <Addon type={postfixType} value={postfixValue} color={postfixBtnColor} disabled={disabled} /> : null }{postfixValue ? \"\\n\" : null}\n            </div>\n            {helpBlock ? <div className=\"help-block\" data-success={successMessage || null} data-error={errorMessage || null}>{helpBlock}</div> : null}\n        </div>\n    );\n};\n\nInputGroup.propTypes = {\n    type: PropTypes.string.isRequired,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    pattern: PropTypes.string,\n    validate: PropTypes.bool,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.string,\n    autoComplete: PropTypes.string,\n    disabled: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    label: PropTypes.string,\n    validationState: PropTypes.oneOf([\"success\", \"error\", \"\"]),\n    selectOptions: PropTypes.array,\n    prefixValue: PropTypes.string,\n    prefixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    prefixBtnColor: PropTypes.oneOf([\"executive\", \"guiding\", \"destructive\"]),\n    postfixValue: PropTypes.string,\n    postfixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    postfixBtnColor: PropTypes.oneOf([\"executive\", \"guiding\", \"destructive\"]),\n    feedbackIcon: PropTypes.string,\n    helpBlock: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool\n    ]),\n    errorMessag: PropTypes.string,\n    successMessag: PropTypes.string\n};\n\nexport default InputGroup;\n","import React from \"react\";\n\nimport { ComponentPreview, DocContainer, Property, Attribute } from \"#\";\nimport PrismCode from \"react-prism\";\nimport InputGroupComponent from \"@/InputGroup\";\n\nconst BasicExample = () => (\n    <>\n        <h2 id=\"basic-example\">Basic example</h2>\n        <p>\n            Add a <PrismCode className=\"language-html\">{\"<span>\"}</PrismCode> with class <Property value=\".input-group-addon\"/> to get a gray box on the left,\n            right or both sides of an <PrismCode className=\"language-html\">{\"<input>\"}</PrismCode> element. The position of\n            your <Property value=\".input-group-addon\"/> depends on if you place it before or after the <PrismCode className=\"language-html\">{\"<input\"}</PrismCode> element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <InputGroupComponent\n                id=\"input-id-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-2\"\n                type=\"text\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                prefixType=\"icon\"\n                prefixValue=\"email\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-4\"\n                type=\"textarea\"\n                label=\"Notes\"\n                placeholder=\"Special requests\"\n                prefixType=\"icon\"\n                prefixValue=\"format_quote\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst CheckboxesAndRadios = () => (\n    <>\n        <h2 id=\"checkboxes-and-radios\">Checkboxes and radios</h2>\n        <p>Place any checkbox or radio option within an input group’s addon instead of text.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"checkbox\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>{\"\\n\\n\"}\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"radio\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst ButtonAddons = () => (\n    <>\n        <h2 id=\"button-addons\">Button addons</h2>\n        <p>\n            If you want <PrismCode className=\"language-html\">{\"<button>\"}</PrismCode>s included with your input elements you can just add a <PrismCode className=\"language-html\">{\"<button>\"}</PrismCode> inside\n            a input-group like you would anywhere else.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"executive\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                type=\"text\"\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"guiding\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"destructive\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithSelect = () => (\n    <>\n        <h2 id=\"with-select\">With select</h2>\n        <p>\n            Inserting text next to a <PrismCode className=\"language-html\">{\"<select>\"}</PrismCode> works just like any other input element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"select\"\n                selectOptions={[\"Bounty hunter\", \"Smuggler\", \"Jedi\"]}\n                prefixValue=\"Profession\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithFeedbackIcon = () => (\n    <>\n        <h2 id=\"with-feedback\">With feedback</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-with-feedback-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n                feedbackIcon=\"cancel\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst ValidationStates = () => (\n    <>\n        <h2 id=\"validation-states\">Validation states</h2>\n        <p>\n            You can also visualize validation on your input-groups. Just add <Property value=\".has-success\" /> or <Property value=\".has-error\" /> with a <Property value=\".input-group\" />.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                validationState=\"success\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n                defaultValue=\"Anderson\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                type=\"text\"\n                validationState=\"error\"\n                placeholder=\"Name\"\n                prefixValue=\"Agent\"\n                defaultValue=\"Smith\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst Disabled = () => (\n    <>\n        <h2 id=\"disabled\">Disabled</h2>\n        <p>\n            Just like for forms you can add <Attribute name=\"disabled\" /> to an input element to disable it.\n            If you are going to disable an element in a <Property value=\".input-group\" /> make sure to also add the <Attribute name=\"disabled\"/> attribute to the buttons.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                disabled\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            />\n            <InputGroupComponent\n                type=\"text\"\n                disabled\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"guiding\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"destructive\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst InputGroup = () => (\n    <DocContainer docToc>\n        <p className=\"lead\">\n            You can include additional information to specific input elements by adding <PrismCode className=\"language-html\">{\"<span>\"}</PrismCode>s\n            or <PrismCode className=\"language-html\">{\"<button>\"}</PrismCode>s in a <Property value=\".input-group\" />.\n        </p>\n        <BasicExample />\n        <ButtonAddons />\n        <WithSelect />\n        <ValidationStates />\n        <Disabled />\n    </DocContainer>\n);\n\nexport default InputGroup;\n\n/* For testing */\nexport { BasicExample, CheckboxesAndRadios, ButtonAddons, WithSelect, WithFeedbackIcon, ValidationStates, Disabled };\n"],"sourceRoot":""}