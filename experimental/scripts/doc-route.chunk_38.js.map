{"version":3,"sources":["webpack://payex/./src/App/Documentation/getting-started/Contributing/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","CreatingYourComponent","CreateADocumentationPage","AddComponentToRoutes","AddingStyles","AddingJavaScript","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_prism__WEBPACK_IMPORTED_MODULE_1__","react_prism__WEBPACK_IMPORTED_MODULE_1___default","_utils__WEBPACK_IMPORTED_MODULE_2__","a","createElement","Fragment","id","value","language","codeFigure","className","Contributing","docToc"],"mappings":"qGAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0CAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6CAAAG,IAAAL,EAAAG,EAAAD,EAAA,yCAAAI,IAAAN,EAAAG,EAAAD,EAAA,iCAAAK,IAAAP,EAAAG,EAAAD,EAAA,qCAAAM,IAAA,IAAAC,EAAAT,EAAA,GAAAU,EAAAV,EAAAW,EAAAF,GAAAG,EAAAZ,EAAA,KAAAa,EAAAb,EAAAW,EAAAC,GAAAE,EAAAd,EAAA,KAKMI,EAAwB,kBAC1BM,EAAAK,EAAAC,cAAAN,EAAAK,EAAAE,SAAA,KACIP,EAAAK,EAAAC,cAAA,MAAIE,GAAG,2BAAP,2BACAR,EAAAK,EAAAC,cAAA,oCAA2BN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,+CAA3C,gCAAuHT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,aAAvI,KACAT,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,aAAaC,YAAU,GAAlD,+hBAuBFhB,EAA2B,kBAC7BK,EAAAK,EAAAC,cAAAN,EAAAK,EAAAE,SAAA,KACIP,EAAAK,EAAAC,cAAA,MAAIE,GAAG,+BAAP,+BACAR,EAAAK,EAAAC,cAAA,oCAA2BN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,0EAA3C,gCAAkJT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,aAAlK,KACAT,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,aAAaC,YAAU,GAAlD,qpBAkBAX,EAAAK,EAAAC,cAAA,2BAAkBN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,qBAAlC,yGAA6JT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,aAA7K,KAA4LT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,kBAA5M,QAAmOT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,eAAnP,KACAT,EAAAK,EAAAC,cAAA,kCAAyBN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,iBAAzC,sEAA6HT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,WAA7I,oIAAyRT,EAAAK,EAAAC,cAACH,EAAAE,EAAD,CAAWO,UAAU,iBAAiB,QAA/T,sFAAqaZ,EAAAK,EAAAC,cAACH,EAAAE,EAAD,CAAWO,UAAU,iBAAiB,QAA3c,WAIFhB,EAAuB,kBACzBI,EAAAK,EAAAC,cAAAN,EAAAK,EAAAE,SAAA,KACIP,EAAAK,EAAAC,cAAA,MAAIE,GAAG,2BAAP,2BACAR,EAAAK,EAAAC,cAAA,eAAMN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,6BAAtB,mDACAT,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,aAAaC,YAAU,GAAlD,2dAwBAX,EAAAK,EAAAC,cAAA,gGAAuFN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,cAAvG,gBAAmI,IAAnI,sCAA0KT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,sEAA1L,uCAIFZ,EAAe,WAqCjB,OACIG,EAAAK,EAAAC,cAAA,WACIN,EAAAK,EAAAC,cAAA,MAAIE,GAAG,iBAAP,iBACAR,EAAAK,EAAAC,cAAA,mEAA0DN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,2BAA1E,aAA+GT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,8BAA/H,KACAT,EAAAK,EAAAC,cAxCmB,kBACvBN,EAAAK,EAAAC,cAAAN,EAAAK,EAAAE,SAAA,KACIP,EAAAK,EAAAC,cAAA,kCACAN,EAAAK,EAAAC,cAAA,oDAA2CN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,YAA3D,+BAAmGT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,YAAnH,+DACAT,EAAAK,EAAAC,cAAA,wFACAN,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,MAAMC,YAAU,GAA3C,+GAmCA,MACAX,EAAAK,EAAAC,cAxBkB,kBACtBN,EAAAK,EAAAC,cAAAN,EAAAK,EAAAE,SAAA,KACIP,EAAAK,EAAAC,cAAA,gCACAN,EAAAK,EAAAC,cAAA,6DAAoDN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,+BAApE,mGACAT,EAAAK,EAAAC,cAAA,oDACAN,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,MAAMC,YAAU,GAA3C,oUAmBA,MACAX,EAAAK,EAAAC,cAAA,gCAAuBN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,uBAAvC,8FACAT,EAAAK,EAAAC,cAAA,+DAAsDN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,QAAtE,KAAgFT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,SAAhG,OAA6GT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,SAA7H,8HAAiQT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,mBAAjR,OAKNX,EAAmB,WA8ErB,OACIE,EAAAK,EAAAC,cAAA,WACIN,EAAAK,EAAAC,cAAA,MAAIE,GAAG,qBAAP,qBACAR,EAAAK,EAAAC,cAAA,kGAAyFN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,eACzGT,EAAAK,EAAAC,cAjFkB,kBACtBN,EAAAK,EAAAC,cAAA,WACIN,EAAAK,EAAAC,cAAA,qDACAN,EAAAK,EAAAC,cAAA,oCAA2BN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,+CAA3C,gCAAuHT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,aAAvI,KACAT,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,aAAaC,YAAU,GAAlD,kLAWAX,EAAAK,EAAAC,cAAA,+FAAsFN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,SAAtG,cAkEA,MACAT,EAAAK,EAAAC,cA/Dc,kBAClBN,EAAAK,EAAAC,cAAA,WACIN,EAAAK,EAAAC,cAAA,qDACAN,EAAAK,EAAAC,cAAA,iBAAQN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,kCAAxB,4BACAT,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,aAAaC,YAAU,GAAlD,wLA2DA,MACAX,EAAAK,EAAAC,cA3CsB,kBAC1BN,EAAAK,EAAAC,cAAA,WACIN,EAAAK,EAAAC,cAAA,0DACAN,EAAAK,EAAAC,cAAA,yGAAgGN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,cAAhH,WAAuI,IAAvI,KAA6IT,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,YAA7J,+CAAsN,IAAtN,sDACAT,EAAAK,EAAAC,cAAA,sDAA6CN,EAAAK,EAAAC,cAACF,EAAA,SAAD,CAAUK,MAAM,oCAA7D,KACAT,EAAAK,EAAAC,cAACF,EAAA,iBAAD,CAAkBM,SAAS,aAAaC,YAAU,GAAlD,i3BAsCA,QAgBGE,UAXM,kBACjBb,EAAAK,EAAAC,cAACF,EAAA,aAAD,CAAcU,QAAM,GAChBd,EAAAK,EAAAC,cAAA,KAAGM,UAAU,QAAb,6BACAZ,EAAAK,EAAAC,cAACZ,EAAD,MACAM,EAAAK,EAAAC,cAACX,EAAD,MACAK,EAAAK,EAAAC,cAACV,EAAD,MACAI,EAAAK,EAAAC,cAACT,EAAD,MACAG,EAAAK,EAAAC,cAACR,EAAD","file":"scripts/doc-route.chunk_38.js?f580515ce4e7c6ef28bd","sourcesContent":["import React from \"react\";\nimport PrismCode from \"react-prism\";\n\nimport { ComponentPreview, DocContainer, Property } from \"#\";\n\nconst CreatingYourComponent = () => (\n    <>\n        <h2 id=\"creating-your-component\">Creating your component</h2>\n        <p>Create a new file under <Property value=\"./src/App/components/[MyExampleComponent]/\" /> for your component, name it <Property value=\"index.js\" />:</p>\n        <ComponentPreview language=\"javascript\" codeFigure>\n            {`\n//example component\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nconst MyExampleComponent = ({ type, title, separator }) => (\n    <div className={\\`well well-\\${type}\\`}>\n        <h3>{title}</h3>\n        {separator ? <hr /> : null}\n        This is my example component in a well.\n    </div>\n);\nMyExampleComponent.propTypes = {\n    type: PropTypes.oneOf([\"light\", \"dark\"]).isRequired,\n    title: PropTypes.string.isRequired,\n    separator: PropTypes.bool\n};\nexport default MyExampleComponent;\n            `}\n        </ComponentPreview>\n    </>\n);\n\nconst CreateADocumentationPage = () => (\n    <>\n        <h2 id=\"create-a-documentation-page\">Create a documentation page</h2>\n        <p>Create a new file under <Property value=\"./src/App/Documentation/Components/[MyExampleDocumentationComponent]/\" /> for your component, call it <Property value=\"index.js\" />:</p>\n        <ComponentPreview language=\"javascript\" codeFigure>\n            {`\n//example documentation component\nimport React from \"react\";\nimport { ComponentPreview, DocContainer } from \"#\";\nimport MyExampleComponent from \"@/MyExampleComponent\";\nconst MyExampleDocumentationComponent = () => (\n    <DocContainer docToc>\n        <p className=\"lead\">This is the documentation for My Example Component.</p>\n        <h2 id=\"example-usage\">Example usage</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure>\n            <MyExampleComponent type=\"dark\" title=\"My Example Component\" separator />\n        </ComponentPreview>\n    </DocContainer>\n);\nexport default MyExampleDocumentationComponent;\n            `}\n        </ComponentPreview>\n        <p>Use the custom <Property value=\"ComponentPreview\" /> component to preview your component. It has several props, for this example we are going to be using <Property value=\"language\" />, <Property value=\"showCasePanel\" /> and <Property value=\"codeFigure\" />.</p>\n        <p>We are also using the <Property value=\"DocContainer\" /> component to sentralize the layout of the documentation, pass the <Property value=\"docToc\" /> prop to add a dynamic table of contents to the documentation of your component. This component scans the provided component for <PrismCode className=\"language-html\">{\"<h2>\"}</PrismCode>-tags and creates anchors for easier navigation. Just remember to add an id to the <PrismCode className=\"language-html\">{\"<h2>\"}</PrismCode>-tag.</p>\n    </>\n);\n\nconst AddComponentToRoutes = () => (\n    <>\n        <h2 id=\"add-component-to-routes\">Add component to routes</h2>\n        <p>In <Property value=\"./src/App/routes/docs.js\" /> under the components object add the following:</p>\n        <ComponentPreview language=\"javascript\" codeFigure>\n            {`\n/**\n * Components\n */\n{\n    title: \"Components\",\n    path: \"/docs/components\",\n    redirect: \"/docs/components/alerts\",\n    routes: [\n        ...\n        ...\n        // ADD THIS\n        {\n            title: \"My Example Documentation Component\",\n            path: \"/docs/components/my-example-documentation-component\",\n            componentPath: \"components/My-example-documentation-component\"\n        },\n        ...\n        ...\n    ]\n},\n            `}\n        </ComponentPreview>\n        <p>You will now be able to go to the route you provided to preview your component. Run <Property value=\"npm start\" /> if you haven{\"'\"}t already done so, and navigate to <Property value=\"localhost:3000/docs/components/my-example-documentation-component\" /> to see your component in action.</p>\n    </>\n);\n\nconst AddingStyles = () => {\n    const ImportingTheStyles = () => (\n        <>\n            <h3>Importing the styles</h3>\n            <p>Import it in the appropriate root-file (<Property value=\"px.less\" /> for the core styles, under <Property value=\"/themes\" /> if the component is going to be part of a specific theme).</p>\n            <p>Assuming you are creating a core component the import would look like this:</p>\n            <ComponentPreview language=\"css\" codeFigure>\n                {`\n/* px.less */\n...\n/* Components */\n@import \"components/my-example-component\";\n...\n                `}\n            </ComponentPreview>\n        </>\n    );\n\n    const CreatingVariables = () => (\n        <>\n            <h3>Creating variables</h3>\n            <p>To add custom variables to your component modify <Property value=\"./src/less/_variables.less\" />, and add a section for your component. Add it alphabetically and update the table of contents.</p>\n            <p>Adding a section should look like this:</p>\n            <ComponentPreview language=\"css\" codeFigure>\n                {`\n// _variables.less\n// [number]. My Example Component\n// ==========================================================================\n@my-example-component-color: @gray-3;\n@my-example-component-background: @gray-8;\n@my-example-component-padding: 1rem;\n@my-example-component-font-family: \"Arial\";\n                `}\n            </ComponentPreview>\n        </>\n    );\n\n    return (\n        <div>\n            <h2 id=\"adding-styles\">Adding styles</h2>\n            <p>To add styling for your component create a new file in <Property value=\"./src/less/components/\" />, name it <Property value=\"my-example-component.less\" />.</p>\n            <ImportingTheStyles />\n            <CreatingVariables />\n            <p>Your the styles for <Property value=\"MyExampleComponent\" /> should now be included properly, and you should see changes immediatly while running dev.</p>\n            <p>When writing styles for your component, try to use <Property value=\"rem\" /> (<Property value=\"1rem\" /> = ~<Property value=\"16px\" />) and the predefined variables (only if it makes sense of course) as much as possible. And follow the linting rules set by <Property value=\"./.stylelintrc\" />.</p>\n        </div>\n    );\n};\n\nconst AddingJavaScript = () => {\n    const CreateAScriptFile = () => (\n        <div>\n            <h3>Create a script file for your component</h3>\n            <p>Create a new file under <Property value=\"./src/px-script/main/[MyExampleComponent]/\" /> for your component, name it <Property value=\"index.js\" />:</p>\n            <ComponentPreview language=\"javascript\" codeFigure>\n                {`\nconst init = () => {\n    alert(\"MyExampleComponent was initialized\");\n};\nconst MyExampleComponent = {\n    init\n};\nexport default MyExampleComponent;\n                `}\n            </ComponentPreview>\n            <p>Note: All essential functionality for your component needs to be called within the <Property value=\"init\" /> method.</p>\n        </div>\n    );\n\n    const AddScriptToPX = () => (\n        <div>\n            <h3>Add your components script to px-script</h3>\n            <p>Open <Property value=\"./src/px-script/main/index.js\" /> and add your component:</p>\n            <ComponentPreview language=\"javascript\" codeFigure>\n                {`\n...\nimport MyExampleComponent from \"./MyExampleComponent\";\n...\nconst px = {\n...\nMyExampleComponent,\n...\n};\n...\nexport { ... MyExampleComponent, ... }\n                `}\n            </ComponentPreview>\n        </div>\n    );\n\n    const InitializingTheScript = () => (\n        <div>\n            <h2>Initializing the script in the documentation</h2>\n            <p>Considering the documentation is built in react your documentation component will load after <Property value=\"px-script\" /> runs it{\"'\"}s <Property value=\"initAll\" /> method, you will need to run your component{\"'\"}s init method when the component actually renders.</p>\n            <p>You can do this by slightly modifying the <Property value=\"MyExampleDocumentationComponent\" />:</p>\n            <ComponentPreview language=\"javascript\" codeFigure>\n                {`\n//example documentation component\n// change this line\nimport React, { Component } from \"react\";\n...\n// import your components script\nimport { MyExampleComponent } from \"$/px-script/main\";\n...\n...\n// modify MyExampleDocumentationComponent\nclass MyExampleDocumentationComponent extends Component {\n    componentDidMount () {\n        MyExampleComponent.init();\n    }\n    render() {\n        return (\n            <DocContainer docToc>\n                <p className=\"lead\">This is the documentation for My Example Component.</p>\n                <h2 id=\"example-usage\">Example usage</h2>\n                <ComponentPreview language=\"html\" showCasePanel codeFigure>\n                    <MyExampleComponent type=\"dark\" title=\"My Example Component\" separator />\n                </ComponentPreview>\n            </DocContainer>\n        )\n    }\n}\n                `}\n            </ComponentPreview>\n        </div>\n    );\n\n    return (\n        <div>\n            <h2 id=\"adding-javascript\">Adding javascript</h2>\n            <p>If your component needs javascript to run, you will need to add the javascript to the <Property value=\"px-script\" /></p>\n            <CreateAScriptFile />\n            <AddScriptToPX />\n            <InitializingTheScript />\n        </div>\n    );\n};\n\nconst Contributing = () => (\n    <DocContainer docToc>\n        <p className=\"lead\">To create a new component</p>\n        <CreatingYourComponent />\n        <CreateADocumentationPage />\n        <AddComponentToRoutes />\n        <AddingStyles />\n        <AddingJavaScript />\n    </DocContainer>\n);\n\nexport default Contributing;\n\n/* For testing */\nexport { CreatingYourComponent, CreateADocumentationPage, AddComponentToRoutes, AddingStyles, AddingJavaScript };\n"],"sourceRoot":""}